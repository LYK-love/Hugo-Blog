<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on LYK-love</title>
    <link>https://lyk-love.cn/Hugo-Blog/tags/shell/</link>
    <description>Recent content in shell on LYK-love</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Apr 2023 21:48:25 +0000</lastBuildDate><atom:link href="https://lyk-love.cn/Hugo-Blog/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shell Script Searching Path</title>
      <link>https://lyk-love.cn/Hugo-Blog/posts/shell-script-searching-path/</link>
      <pubDate>Sun, 23 Apr 2023 21:48:25 +0000</pubDate>
      
      <guid>https://lyk-love.cn/Hugo-Blog/posts/shell-script-searching-path/</guid>
      <description>Outline:
Shell Script Searching Path Append path to PATH Bad Practices 哈哈 我是陆昱宽
他是加兰
Shell Script Searching Path Shell will find and execute command. The searching sequence of command name is:
以相对/绝对路径执行指令，例如/bin/ls 或./ls 由 alias 找到该指令来执行 由 bash 内置的( builtin)指令来执行. 通过 PATH 这个变量的顺序搜寻到的第一个指令来执行. 在某一步骤找到command name后就会停止查找, 并且尝试执行.
因此, 如果一个command name不是一个可执行的路径, 也不是一个alias, 又不是一个builtin( 例如alias), 则shell会在搜环境变量$PATH中搜索该command name, 如果找到, 就执行; 找不到, 则报错&amp;quot;command not found&amp;quot;.
由于PATH 是个环境变量, 因此它在任意的子session中都有效. Command not found == not found in PATH.</description>
      <content>&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shell Script Searching Path&lt;/li&gt;
&lt;li&gt;Append path to &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bad Practices&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;哈哈&#34;&gt;哈哈&lt;/h1&gt;
&lt;p&gt;我是陆昱宽&lt;/p&gt;
&lt;p&gt;他是加兰&lt;/p&gt;
&lt;h1 id=&#34;shell-script-searching-path&#34;&gt;Shell Script Searching Path&lt;/h1&gt;
&lt;p&gt;Shell will &lt;strong&gt;find and execute&lt;/strong&gt; command. The searching sequence of command name is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以相对/绝对路径执行指令，例如&lt;code&gt;/bin/ls &lt;/code&gt;或&lt;code&gt;./ls &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由 &lt;code&gt;alias&lt;/code&gt; 找到该指令来执行&lt;/li&gt;
&lt;li&gt;由 bash 内置的( builtin)指令来执行.&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;PATH&lt;/code&gt; 这个变量的顺序搜寻到的第一个指令来执行.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在某一步骤找到command name后就会停止查找, 并且尝试执行.&lt;/p&gt;
&lt;p&gt;因此, 如果一个command name不是一个可执行的路径, 也不是一个alias, 又不是一个builtin( 例如&lt;code&gt;alias&lt;/code&gt;), 则shell会在搜环境变量&lt;code&gt;$PATH中&lt;/code&gt;搜索该command name, 如果找到, 就执行; 找不到, 则报错&amp;quot;command not found&amp;quot;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于&lt;code&gt;PATH&lt;/code&gt; 是个环境变量, 因此它在任意的子session中都有效.&lt;/li&gt;
&lt;li&gt;Command not found == not found in &lt;code&gt;PATH&lt;/code&gt;. 这只是意味着在&lt;code&gt;PATH&lt;/code&gt;中找不到该command name. 可以将该command的路径添加到&lt;code&gt;PATH&lt;/code&gt;来让shell能搜索到它.&lt;/li&gt;
&lt;li&gt;可以看到, 如果一个command name是路径, 那么在step1就找到了, 不会尝试后面的步骤. &lt;strong&gt;如果一个command name带有slash( &lt;code&gt;/&lt;/code&gt; ), 则会被视作路径名.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;append-path-to-path&#34;&gt;Append path to &lt;code&gt;PATH&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;将命令的路径加入环境变量&lt;code&gt;PATH&lt;/code&gt;的方法:&lt;/p&gt;
&lt;p&gt;声明环境变量&lt;code&gt;PATH&lt;/code&gt;, 值为之前的&lt;code&gt;PATH&lt;/code&gt;的值(采用&lt;code&gt;$&lt;/code&gt;进行赋值),  再append 一个&lt;code&gt;:&lt;/code&gt;, 因为环境变量之间通过冒号隔开, 再append要添加的路径, 这里是&lt;code&gt;/home/to/operation_tools&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:/home/to/operation_tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;bad-practices&#34;&gt;Bad Practices&lt;/h1&gt;
&lt;p&gt;以下是一些错误的对&lt;code&gt;PATH&lt;/code&gt;进行设置的例子.&lt;/p&gt;
&lt;h2 id=&#34;current-directory-in-path&#34;&gt;Current directory in &lt;code&gt;PATH&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A leading or trailing colon in &lt;code&gt;PATH&lt;/code&gt;, or two adjacent colons (&lt;code&gt;::&lt;/code&gt;), indicate that the &lt;em&gt;current directory&lt;/em&gt; is one of the directorie&lt;/strong&gt;s that the shell should try when looking for executable command names. This is a security risk and you must not do it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo &amp;#34;$PATH&amp;#34;
:/bin/:/usr/bin                          # EXTREME SECURITY RISK!

$ echo &amp;#34;$PATH&amp;#34;
/bin/::/usr/bin                          # MODERATE SECURITY RISK!

$ echo &amp;#34;$PATH&amp;#34;
/bin/:/usr/bin:                          # SECURITY RISK!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Do not put the current directory (or any relative path directory) in &lt;code&gt;PATH&lt;/code&gt; – it is a security risk.&lt;/strong&gt; You might accidentally execute a malicious program in the current directory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example: If you put the current directory at the start of your &lt;code&gt;PATH&lt;/code&gt;, e.g. &lt;code&gt;PATH=:/bin:/usr/bin&lt;/code&gt;, then when you type &lt;code&gt;ls&lt;/code&gt; the first program that is tried is &lt;code&gt;./ls&lt;/code&gt; (the program named &lt;code&gt;ls&lt;/code&gt; in the current directory) which might be a malicious program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;command-names-with-slashes-avoid-path&#34;&gt;Command names with slashes avoid &lt;code&gt;PATH&lt;/code&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>Shell Script</title>
      <link>https://lyk-love.cn/Hugo-Blog/posts/shell-script/</link>
      <pubDate>Sun, 23 Apr 2023 20:53:12 +0000</pubDate>
      
      <guid>https://lyk-love.cn/Hugo-Blog/posts/shell-script/</guid>
      <description>&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intro&lt;/li&gt;
&lt;li&gt;Shebang&lt;/li&gt;
&lt;li&gt;Execute Shell Script&lt;/li&gt;
&lt;li&gt;I/O redirection&lt;/li&gt;
&lt;/ul&gt;</description>
      <content>&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intro&lt;/li&gt;
&lt;li&gt;Shebang&lt;/li&gt;
&lt;li&gt;Execute Shell Script&lt;/li&gt;
&lt;li&gt;I/O redirection&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/onceupon/Bash-Oneliner&#34;&gt;常见Shell指令&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;scripts-vs-shell-functions&#34;&gt;scripts vs shell functions&lt;/h2&gt;
&lt;p&gt;Some differences between shell functions and scripts that you should keep in mind are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functions have to be in the same language as the shell, while scripts can be written in any language. This is why including a shebang for scripts is important.&lt;/li&gt;
&lt;li&gt;Functions are loaded once when their definition is read. Scripts are loaded every time they are executed. This makes functions slightly faster to load, but whenever you change them you will have to reload their definition.&lt;/li&gt;
&lt;li&gt;Functions are executed &lt;strong&gt;in the current shell environment&lt;/strong&gt;( 可以简单理解为， function的所在路径是当前路径 ) whereas scripts execute in their own process. Thus, functions can modify environment variables, e.g. change your current directory, whereas scripts can’t. Scripts will be passed by value environment variables that have been exported using &lt;a href=&#34;https://www.man7.org/linux/man-pages/man1/export.1p.html&#34;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;As with any programming language, functions are a powerful construct to achieve modularity, code reuse, and clarity of shell code. Often shell scripts will include their own function definitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shell-style&#34;&gt;Shell Style&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://google.github.io/styleguide/shellguide.html&#34;&gt;https://google.github.io/styleguide/shellguide.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;shebang&#34;&gt;Shebang&lt;/h1&gt;
&lt;p&gt;Note that scripts need not necessarily be written in bash to be called from the terminal. For instance, here’s a simple Python script that outputs its arguments in reversed order:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/local/bin/python
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;import sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; arg in reversed&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sys.argv&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1:&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;shebang: the character sequence consisting of &lt;code&gt;#!&lt;/code&gt; at the beginning of a script in   a &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix-like&#34;&gt;Unix-like&lt;/a&gt; operating system&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;shell会将shebang中&lt;code&gt;#!&lt;/code&gt;之后的内容作为一个程序的路径，打开该程序， 将本script的路径当作参数传入( 即: 将整个script当作input传入shebang所指定的程序 ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example, if a script is named with the path &lt;em&gt;path/to/script&lt;/em&gt;, and it starts with the following line, &lt;code&gt;#!/bin/sh&lt;/code&gt;, then the program loader is instructed to run the program &lt;em&gt;/bin/sh&lt;/em&gt;, passing &lt;em&gt;path/to/script&lt;/em&gt; as the first argument. In &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux&#34;&gt;Linux&lt;/a&gt;, this behavior is the result of both kernel and user-space code.[&lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_(Unix)#cite_note-9&#34;&gt;9]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The shebang line is usually ignored by the interpreter, because the &amp;ldquo;#&amp;rdquo; character is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Comment_(computer_programming)&#34;&gt;comment&lt;/a&gt; marker in many scripting languages; some language interpreters that do not use the hash mark to begin comments still may ignore the shebang line in recognition of its purpose.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shebang-with-env&#34;&gt;shebang with env&lt;/h2&gt;
&lt;p&gt;The shebang expects a full path to the interpreter to use so the following syntax would be incorrect:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setting a full path like this might work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/local/bin/python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but would be non portable as python might be installed in &lt;code&gt;/bin&lt;/code&gt;, &lt;code&gt;/opt/python/bin&lt;/code&gt;, or wherever other location.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;env&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;is a method allowing a portable way to specify to the OS a full path equivalent to the one where &lt;code&gt;python&lt;/code&gt; is first located in the &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;execute-shell-script&#34;&gt;Execute Shell Script&lt;/h1&gt;
&lt;p&gt;执行脚本文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直接指定&lt;code&gt;sh&lt;/code&gt;来执行该脚本，不需要shebang，也不需要脚本有执行权限（因为该脚本直接作为参数传给了sh).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sh script_file_path
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要写shebang来指定解释器, 并且要指定脚本路径.&lt;/p&gt;
&lt;p&gt;必须加上&lt;code&gt;./&lt;/code&gt;使得该command name被识别为一个路径名. 否则shell会继续在alias, builtin和&lt;code&gt;PATH&lt;/code&gt;中搜索该command name. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod +x script_file &lt;span style=&#34;color:#75715e&#34;&gt;##(chown, chgrp optionally)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./script_file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;.&lt;/code&gt;或&lt;code&gt;source&lt;/code&gt;在当前shell session中执行该脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source script_file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;. script_file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此, 该方法可以用于刷新当前shell环境:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shell script是能在命令行直接输入的, 但仅会作用一次&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意: 方法1,2都是新开一个子shell session，在其中执行脚本，而方法3, 4是在当前shell session中执行脚本&lt;/p&gt;
&lt;h1 id=&#34;io-redirection&#34;&gt;I/O redirection&lt;/h1&gt;
&lt;p&gt;一般情况下，每个 Linux 命令运行时都会打开三个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。&lt;/li&gt;
&lt;li&gt;标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。&lt;/li&gt;
&lt;li&gt;标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Discard the output&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ command &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The file &lt;strong&gt;/dev/null&lt;/strong&gt; is a special file that automatically &lt;strong&gt;discards all its input&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discard both output of a command and its error output,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ command &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;a command normally writes its output to &lt;strong&gt;STDOUT&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;use standard redirection to redirect &lt;strong&gt;STDERR&lt;/strong&gt; to &lt;strong&gt;STDOUT&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这里&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;将标准错误（2）合并到标准输出（1）， 而标准输出已经被重定向到了&lt;code&gt;/dev/null&lt;/code&gt;, 因此总体效果是，标准错误和输出都被重定向到了&lt;code&gt;/dev/null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;file descriptor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0&lt;/strong&gt; : STDIN&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt;: STDOUT&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&lt;/strong&gt;: STDERR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Command &amp;amp; Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;pgm &amp;gt; file&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Output of pgm is redirected to file&lt;!-- raw HTML omitted --&gt;会覆盖目标文件中原有的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;pgm &amp;lt; file&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Program pgm reads its input from file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;pgm &amp;raquo; file&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Output of pgm is appended to file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;n &amp;gt; file&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Output from stream with descriptor &lt;strong&gt;n&lt;/strong&gt; redirected to file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;n &amp;raquo; file&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Output from stream with descriptor &lt;strong&gt;n&lt;/strong&gt; appended to file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;n &amp;gt;&amp;amp; m&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Merges output from stream &lt;strong&gt;n&lt;/strong&gt; with stream &lt;strong&gt;m&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;n &amp;lt;&amp;amp; m&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Merges input from stream &lt;strong&gt;n&lt;/strong&gt; with stream &lt;strong&gt;m&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;&amp;laquo; tag&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Standard input comes from here through next tag at the start of line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Takes output from one program, or process, and sends it to another&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;here-document&#34;&gt;Here Document&lt;/h2&gt;
&lt;p&gt;Here Document 目前没有统一的翻译，这里暂译为”嵌入文档“。Here Document 是 Shell 中的一种特殊的重定向方式，它的基本的形式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;command &amp;lt;&amp;lt; delimiter
document
delimiter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它的作用是&lt;strong&gt;将两个 delimiter 之间的内容(document) 作为输入传递给 command&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。&lt;/li&gt;
&lt;li&gt;开始的delimiter前后的空格会被忽略掉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的例子，通过 wc -l 命令计算 document 的行数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wc -l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    This is a simple lookup program
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    for good (and bad) restaurants
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    in Cape Town.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可将 Here Document 用在脚本中，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    This is a simple lookup program
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    for good (and bad) restaurants
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    in Cape Town.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;commen-shell-scripts&#34;&gt;Commen Shell Scripts&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt;： 空命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://lyk-love.cn/2023/04/24/Shell-Script-Searching-Path/&#34;&gt;https://lyk-love.cn/2023/04/24/Shell-Script-Searching-Path/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
